"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import employerverification as shared_employerverification
from ..shared import employmentverificationstatus as shared_employmentverificationstatus
from ..shared import platformids as shared_platformids
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from test_plaid import utils
from typing import Any, Dict, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmploymentVerification:
    r"""An object containing proof of employment data for an individual"""
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    employer: Optional[shared_employerverification.EmployerVerification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('employer'), 'exclude': lambda f: f is None }})
    r"""An object containing employer data."""
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat }})
    r"""End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD)."""
    platform_ids: Optional[shared_platformids.PlatformIds] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform_ids'), 'exclude': lambda f: f is None }})
    r"""An object containing a set of ids related to an employee"""
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat }})
    r"""Start of employment in ISO 8601 format (YYYY-MM-DD)."""
    status: Optional[shared_employmentverificationstatus.EmploymentVerificationStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current employment status."""
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Current title of employee."""
    

